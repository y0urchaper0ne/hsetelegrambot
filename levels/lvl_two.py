import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from quizz import mxat_history_question, mxat_building_question, mxat_to_nations_question
from location import check_location_mxat
from texts.text_two import *
from levels.lvl_one import (main_menu_closed, main_menu_open, 
                            unit_menu_quizz, unit_menu_wo_quizz,
                            quizz_menu,)
from files_manager import (get_building_score, get_history_score,
                           increment_level_count, increment_building_score,
                           increment_history_score)


def mxat_score(user_id):
    if get_building_score(user_id) == 2.0:
        building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚úÖ'
    else: building_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: ‚ùå'
    if get_history_score(user_id) == 2.0:
        history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚úÖ'
    else: history_score='–ó–∞–≥–∞–¥–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é: ‚ùå' 
    return f'{history_score} \n{building_score}' 


def mxat_transition(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_id = update.effective_chat.id
    response = check_location_mxat(update, context)
    if response:
        update.message.reply_text(mxat_beginning)
        time.sleep(2)
        increment_level_count(user_id)
        update.message.reply_text(
            text='–ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Ç–µ–∞—Ç—Ä–æ–º ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ, –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –∑–¥–∞–Ω–∏–µ?', 
            reply_markup=main_menu_closed)
        return 'MXAT_MAIN_MENU'
    update.message.reply_text(text='–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ —Ç–µ–∞—Ç—Ä–∞')


def mxat_main_menu(update, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Ä–æ–≤–Ω—è"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ò—Å—Ç–æ—Ä–∏—è üìú':
        if get_history_score(user_id) < 2.0:
            history_menu = unit_menu_quizz
        else: 
            history_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é!', reply_markup=history_menu)
        time.sleep(1)
        update.message.reply_text(
            text=f'{mxat_history_text}', 
            reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –ú–•–¢ –∏–º. –ß–µ—Ö–æ–≤–∞', url=mxat_history_url)]]),
            )
        return 'MXAT_HISTORY'

    elif str(update.message.text) == '–ó–¥–∞–Ω–∏–µ üèõÔ∏è':
        if get_building_score(user_id) < 2.0:
            building_menu = unit_menu_quizz
        else:
            building_menu = unit_menu_wo_quizz
        update.message.reply_text(text='–£–∑–Ω–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –∑–¥–∞–Ω–∏–µ!', reply_markup=building_menu)
        update.message.reply_text(
            text=f'{mxat_building_text}', 
            reply_markup= InlineKeyboardMarkup([[InlineKeyboardButton(text='–ó–¥–∞–Ω–∏–µ –ú–•–¢ –∏–º. –ß–µ—Ö–æ–≤–∞', url=mxat_building_url)]]),
            )
        return 'MXAT_BUILDING'
      
    elif str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîí' or str(update.message.text) == '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ üîë':
        forward_menu = ReplyKeyboardMarkup([['–í–ø–µ—Ä–µ–¥!']], resize_keyboard=True, one_time_keyboard=True)
        if get_building_score(user_id) < 2.0 or get_history_score(user_id) < 2.0:
            user_score = mxat_score(user_id)
            update.message.reply_text(text=f'–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏! \n\n{user_score}')
        elif get_building_score(user_id) >= 2.0 and get_history_score(user_id) >= 2.0:
            update.message.reply_text(
                text=f'–ú–•–¢ –∏ –ø—Ä–∞–≤–¥–∞ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π. Bravo, –≤—ã —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —É—Ä–æ–≤–Ω–µ!' \
                     f' –û–¥–Ω–∞–∫–æ –Ω—É–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ.', 
                reply_markup=forward_menu)
            return 'LEVEL_TWO_END'

    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def mxat_history(update, context):
    """–ë–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ú–•–¢"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_history_score(user_id) < 2.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://ic.wampi.ru/2023/06/08/mxat_history.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'MXAT_HISTORY_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 2.0 and get_history_score(user_id) == 2.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MXAT_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def mxat_building(update, context):
    """–ë–ª–æ–∫ –∑–¥–∞–Ω–∏—è –ú–•–¢"""
    user_id = update.effective_chat.id

    if str(update.message.text) == '–ó–∞–≥–∞–¥–∫–∞' and get_building_score(user_id) < 2.0:
        reply_markup = InlineKeyboardMarkup(quizz_menu)
        update.message.reply_photo(
            photo="https://im.wampi.ru/2023/06/08/mxat_building.png",
            caption = '–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–∑—É üëá',
            reply_markup=reply_markup)
        return 'MXAT_BUILDING_QUIZZ'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        if get_building_score(user_id) == 2.0 and get_history_score(user_id) == 2.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MXAT_MAIN_MENU'
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def mxat_history_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ú–•–¢"""
    user_id = update.effective_chat.id

    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 2.0 and get_history_score(user_id) == 2.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MXAT_MAIN_MENU'
    response = mxat_history_question(text)
    if response == 'Parfait! –í—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã':
        increment_history_score(user_id)
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'MXAT_HISTORY'
    update.message.reply_text(response)


def mxat_history_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—å–µ—Å –ê.–ü. –ß–µ—Ö–æ–≤–∞', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–î—è–¥—è –í–∞–Ω—è</tg-spoiler>', parse_mode='HTML')


def mxat_building_quizz(update, context):
    """–í–æ–ø—Ä–æ—Å –ø—Ä–æ –∑–¥–∞–Ω–∏–µ –ú–•–¢"""
    user_id = update.effective_chat.id
    text = str(update.message.text).lower()
    if text == '–Ω–∞–∑–∞–¥':
        if get_building_score(user_id) == 2.0 and get_history_score(user_id) == 2.0:
            main_menu = main_menu_open
        else: main_menu = main_menu_closed
        update.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å!', reply_markup=main_menu)
        return 'MXAT_MAIN_MENU'
    response = mxat_building_question(text)
    if response == 'Chic! –ò –ø—Ä–∞–≤–¥–∞':
        increment_building_score(user_id)
        update.message.reply_text(text=response, reply_markup=unit_menu_wo_quizz)
        return 'MXAT_BUILDING'
    update.message.reply_text(response)


def mxat_building_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_reply_markup(reply_markup=reply_markup)
        query.message.reply_text(
            text='üí° –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –¥–≤–µ—Ä–∏ –ø–æ–¥ –≥–æ—Ä–µ–ª—å–µ—Ñ–æ–º', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_reply_markup()
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–ú–∞–ª–∞—è —Å—Ü–µ–Ω–∞</tg-spoiler>', parse_mode='HTML')


def level_two_end(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
    reply_markup = InlineKeyboardMarkup(quizz_menu)
    if str(update.message.text) == '–í–ø–µ—Ä–µ–¥!':
        update.message.reply_photo(
            photo="https://ie.wampi.ru/2023/06/08/nations_transition.png")
        time.sleep(2)
        update.message.reply_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        return "MXAT_TO_NATIONS_TRANSITION"
    else: update.message.reply_text(text=f'–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª ü•∫')


def mxat_to_nations(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–∞–¥–∫–∏ —Å –¢–µ–∞—Ç—Ä–æ–º –ù–∞—Ü–∏–π"""
    button = ReplyKeyboardMarkup(
        [[KeyboardButton(text='–ù–∞ –º–µ—Å—Ç–µ!', request_location=True)]], resize_keyboard=True, one_time_keyboard=True)    
    text = str(update.message.text).lower()
    response = mxat_to_nations_question(text)
    if response == 'G√©nial! –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ ‚Äî –¢–µ–∞—Ç—Ä –ù–∞—Ü–∏–π!':
        update.message.reply_text(response)
        time.sleep(2)
        update.message.reply_text(text=f"{nations_transition_text}")
        time.sleep(3)
        update.message.reply_text(
            text=nations_transition_text_2,
            reply_markup=button)
        return 'MXAT_LOCATION'
    update.message.reply_text(response)


def mxat_location_quizz_menu_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    if query.data == 'hint':
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data='answer')]])
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            reply_markup=reply_markup)
        query.message.reply_text(
            text=f'üí° –ï–≥–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ö—É–¥—Ä—É–∫ ‚Äî –ï–≤–≥–µ–Ω–∏–π –ú–∏—Ä–æ–Ω–æ–≤', parse_mode='HTML')    
    elif query.data == 'answer':
        query.edit_message_text(
            text=f'–î–æ–≥–∞–¥–∞–ª–∏—Å—å, –æ –∫–∞–∫–æ–º —Ç–µ–∞—Ç—Ä–µ —Ä–µ—á—å? ü§î \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!')
        query.message.reply_text(
            text=f'–û—Ç–≤–µ—Ç: <tg-spoiler>–¢–µ–∞—Ç—Ä –ù–∞—Ü–∏–π</tg-spoiler>', parse_mode='HTML')
