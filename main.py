import warnings

from telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove, 
                      InlineKeyboardMarkup, InlineKeyboardButton)

from telegram.ext import (CallbackQueryHandler,
                          CommandHandler, ConversationHandler,
                          Filters, Updater, MessageHandler)

from levels.lvl_one import (intro, intro_two, intro_three, intro_four,
                     bolshoi_building, bolshoi_building_quizz, 
                     bolshoi_history, bolshoi_history_quizz,
                     bolshoi_main_menu, history_quizz_menu_callback,
                     building_quizz_menu_callback, level_one_end,
                     bolshoi_location_quizz_menu_callback,
                     level_choice, level_choice_menu, bolshoi_to_mxat,
                    )
from levels.lvl_two import (mxat_transition, mxat_main_menu, mxat_history,
                            mxat_building, mxat_location_quizz_menu_callback,
                            mxat_history_quizz, mxat_history_quizz_menu_callback,
                            mxat_building_quizz_menu_callback, level_two_end,
                            mxat_building_quizz,mxat_to_nations,
                            )
from levels.lvl_three import (nations_transition, nations_building,
                              nations_building_quizz, nations_history,
                              nations_building_quizz_menu_callback, 
                              nations_history_quizz_menu_callback,
                              nations_location_quizz_menu_callback,
                              nations_history_quizz, nations_main_menu,
                              level_three_end, nations_to_lenkom,
                              )
from levels.lvl_four import (lenkom_transition, lenkom_building,
                              lenkom_building_quizz, lenkom_history,
                              lenkom_building_quizz_menu_callback, 
                              lenkom_history_quizz_menu_callback,
                              lenkom_location_quizz_menu_callback,
                              lenkom_history_quizz, lenkom_main_menu,
                              level_four_end, lenkom_to_electro,
                              )
from levels.lvl_five import (electro_transition, electro_building,
                              electro_building_quizz, electro_history,
                              electro_building_quizz_menu_callback, 
                              electro_history_quizz_menu_callback,
                              electro_history_quizz, electro_main_menu,
                              level_five_end,
                              )
from files_manager import create_csv_file, delete_csv_file
from texts.text_one import rules_url, rules

import os
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TOKEN')

def start(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞"""
    user_id = update.effective_chat.id
    create_csv_file(user_id)
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup(
        [['–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üìù'], ['–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠']],
        resize_keyboard=True)

    context.bot.send_message(
        chat_id=chat.id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ, ' \
            f'—Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî –ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–∞—á–∞–ª–∞ ' \
            f'–ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –∂–µ —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∫–≤–µ—Å—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ üëá',
        reply_markup=button
    )
    return 'INTRO'


def feedback(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±—ç–∫–∞"""
    text = str(update.message.text).lower()
    name = update.message.chat.first_name
    context.bot.send_message(
        chat_id=380077303,
        text=f'–§–∏–¥–±—ç–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}: \n\n{text}',
    )
    update.message.reply_text(
        text='–°–ø–∞—Å–∏–±–æ!',)


def feedback_receiver(update, context):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–¥–±—ç–∫–∞"""
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text=f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ñ–∏–¥–±—ç–∫ –ø–æ –∫–≤–µ—Å—Ç—É üëá',
        reply_markup=ReplyKeyboardRemove()
    )
    return 'FEEDBACK'


def restart(update, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞"""
    ConversationHandler.END
    return start(update, context)



def get_rules(update, context):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç"""
    update.message.reply_text(
        text=rules,
        reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é', url=rules_url)]]))


def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    conversation = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            'FEEDBACK': [MessageHandler(Filters.text & ~Filters.command, feedback)],
            #–í–°–¢–£–ü–õ–ï–ù–ò–ï
            'INTRO': [MessageHandler(Filters.regex('^(–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üìù|–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ üé≠)$'), intro)],
            'LEVEL_CHOICE': [MessageHandler(Filters.text & ~Filters.command, level_choice)],
            'INTRO_2': [MessageHandler(Filters.text & ~Filters.command, intro_two)],
            'INTRO_3': [MessageHandler(Filters.text & ~Filters.command, intro_three)],
            'INTRO_4': [MessageHandler(Filters.text & ~Filters.command, intro_four)],

            #–ë–û–õ–¨–®–û–ô –¢–ï–ê–¢–†
            'BOLSHOI_MAIN_MENU': [MessageHandler(Filters.text & ~Filters.command, bolshoi_main_menu)],
            'BOLSHOI_HISTORY': [MessageHandler(Filters.text & ~Filters.command, bolshoi_history)],
            'BOLSHOI_BUILDING': [MessageHandler(Filters.text & ~Filters.command, bolshoi_building)],
            'BOLSHOI_HISTORY_QUIZZ': [
                        CallbackQueryHandler(history_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, bolshoi_history_quizz)],
            'BOLSHOI_BUILDING_QUIZZ': [
                        CallbackQueryHandler(building_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, bolshoi_building_quizz)],
            'LEVEL_ONE_END': [MessageHandler(Filters.text & ~Filters.command, level_one_end)],
            'BOLSHOI_TO_MXAT_TRANSITION': [
                CallbackQueryHandler(bolshoi_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                MessageHandler(Filters.text & ~Filters.command, bolshoi_to_mxat)],
            'BOLSHOI_LOCATION': [
                        CallbackQueryHandler(bolshoi_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.location & ~Filters.command, mxat_transition)],

            #–ú–•–¢ –ß–ï–•–û–í–ê
            'MXAT_MAIN_MENU': [MessageHandler(Filters.text & ~Filters.command, mxat_main_menu)],
            'MXAT_HISTORY': [MessageHandler(Filters.text & ~Filters.command, mxat_history)],
            'MXAT_BUILDING': [MessageHandler(Filters.text & ~Filters.command, mxat_building)],
            'MXAT_HISTORY_QUIZZ': [
                        CallbackQueryHandler(mxat_history_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, mxat_history_quizz)],
            'MXAT_BUILDING_QUIZZ': [
                        CallbackQueryHandler(mxat_building_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, mxat_building_quizz)],
            'LEVEL_TWO_END': [MessageHandler(Filters.text & ~Filters.command, level_two_end)],
            'MXAT_TO_NATIONS_TRANSITION': [
                CallbackQueryHandler(mxat_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                MessageHandler(Filters.text & ~Filters.command, mxat_to_nations)],
            'MXAT_LOCATION': [
                        CallbackQueryHandler(mxat_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.location & ~Filters.command, nations_transition)],

            #–¢–ï–ê–¢–† –ù–ê–¶–ò–ô
            'NATIONS_MAIN_MENU': [MessageHandler(Filters.text & ~Filters.command, nations_main_menu)],
            'NATIONS_HISTORY': [MessageHandler(Filters.text & ~Filters.command, nations_history)],
            'NATIONS_BUILDING': [MessageHandler(Filters.text & ~Filters.command, nations_building)],
            'NATIONS_HISTORY_QUIZZ': [
                        CallbackQueryHandler(nations_history_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, nations_history_quizz)],
            'NATIONS_BUILDING_QUIZZ': [
                        CallbackQueryHandler(nations_building_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, nations_building_quizz)],
            'LEVEL_THREE_END': [MessageHandler(Filters.text & ~Filters.command, level_three_end)],
            'NATIONS_TO_LENKOM_TRANSITION': [
                CallbackQueryHandler(nations_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                MessageHandler(Filters.text & ~Filters.command, nations_to_lenkom)],
            'NATIONS_LOCATION': [
                        CallbackQueryHandler(nations_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.location & ~Filters.command, lenkom_transition)],

            #–õ–ï–ù–ö–û–ú
            'LENKOM_TRANSITION': [MessageHandler(Filters.text & ~Filters.command, lenkom_transition)],
            'LENKOM_MAIN_MENU': [MessageHandler(Filters.text & ~Filters.command, lenkom_main_menu)],
            'LENKOM_HISTORY': [MessageHandler(Filters.text & ~Filters.command, lenkom_history)],
            'LENKOM_BUILDING': [MessageHandler(Filters.text & ~Filters.command, lenkom_building)],
            'LENKOM_HISTORY_QUIZZ': [
                        CallbackQueryHandler(lenkom_history_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, lenkom_history_quizz)],
            'LENKOM_BUILDING_QUIZZ': [
                        CallbackQueryHandler(lenkom_building_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, lenkom_building_quizz)],
            'LEVEL_FOUR_END': [MessageHandler(Filters.text & ~Filters.command, level_four_end)],
            'LENKOM_TO_LENKOM_TRANSITION': [
                CallbackQueryHandler(lenkom_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                MessageHandler(Filters.text & ~Filters.command, lenkom_to_electro)],
            'LENKOM_LOCATION': [
                        CallbackQueryHandler(lenkom_location_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.location & ~Filters.command, electro_transition)],

            #–≠–õ–ï–ö–¢–†–û–¢–ï–ê–¢–†
            'ELECTRO_TRANSITION': [MessageHandler(Filters.text & ~Filters.command, electro_transition)],
            'ELECTRO_MAIN_MENU': [MessageHandler(Filters.text & ~Filters.command, electro_main_menu)],
            'ELECTRO_HISTORY': [MessageHandler(Filters.text & ~Filters.command, electro_history)],
            'ELECTRO_BUILDING': [MessageHandler(Filters.text & ~Filters.command, electro_building)],
            'ELECTRO_HISTORY_QUIZZ': [
                        CallbackQueryHandler(electro_history_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, electro_history_quizz)],
            'ELECTRO_BUILDING_QUIZZ': [
                        CallbackQueryHandler(electro_building_quizz_menu_callback, pattern='^(hint|answer)$'),
                        MessageHandler(Filters.text & ~Filters.command, electro_building_quizz)],
            'LEVEL_FIVE_END': [MessageHandler(Filters.text & ~Filters.command, level_five_end)],
        },
        fallbacks=[CommandHandler('rules', get_rules), 
                   CommandHandler('levels', level_choice_menu),
                   CommandHandler('restart', restart),
                   CommandHandler('feedback', feedback_receiver)],
        per_chat=True,
    )

    dispatcher.add_handler(conversation)

    updater.start_polling()
    updater.idle()


with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    main()

if __name__ == '__main__':
    main()
